<?php

if ($_SERVER['SCRIPT_FILENAME'] == __FILE__)
    die('Access denied.');

if (!class_exists('ZWT_Base')) {

    /**
     * Main / front controller class
     * ZWT_Base is an object-oriented/MVC base for building WordPress plugins
     * 
     * @package ZWT_Base
     * @author Zanto Translate
     */
    class ZWT_Base extends ZWT_Module {

        public static $notices;         // Needs to be static so static methods can call enqueue notices. Needs to be public so other modules can enqueue notices.
        protected static $readableProperties = array('modules');  // These should really be constants, but PHP doesn't allow class constants to be arrays
        protected static $writeableProperties = array();
        protected $modules;

        const VERSION = '0.2.3';
        const PREFIX = 'zwt_';
        const DEBUG_MODE = false;


        /*
         * Magic methods
         */

        /**
         * Constructor
         * @mvc Controller
         * @author Zanto Translate
         */
        protected function __construct() {
            $this->registerHookCallbacks();

            $this->modules = array(
                'settings' => ZWT_Settings::getInstance(),
                'trans_network' => ZWT_Translation_Network::getInstance(),
                    //'ZWT_Cron'			=> ZWT_Cron::getInstance()
            );

            if (!defined('GTP_SETUP_COMPLETE')) {
                if ($this->modules['settings']->settings['setup_status']['setup_wizard'] == 'complete') {
                    define('GTP_SETUP_COMPLETE', true);
                } else {
                    define('GTP_SETUP_COMPLETE', false);
                }
            }
            add_action('wp_ajax_zwt_all_ajax', array($this, 'zwt_all_ajax'));
            add_action('wp_ajax_nopriv_zwt_all_ajax', array($this, 'zwt_all_ajax'));
            if (isset($_GET['switch_to']))
                ZWT_MO::getSingleton();
            if ($this->modules['settings']->settings['blog_setup']['browser_lang_redirect']) {
                require_once( dirname(__FILE__) . '/class.zwt-browser-lang-redirect.php' );
            }
        }

        /*
         * Static methods
         */

        /**
         * Enqueues CSS, JavaScript, etc
         * @mvc Controller
         * @author Zanto Translate
         */
        //@todo load script only where they are needed
        public static function loadResources($hook_suffix) {
            global $wp_version;
            if (did_action('wp_enqueue_scripts') !== 1 && did_action('admin_enqueue_scripts') !== 1)
                return;

            wp_register_script(
                    self::PREFIX . 'zanto-translation-main', plugins_url('javascript/zanto-main.js', dirname(__FILE__)), array('jquery'), self::VERSION, true
            );

            wp_register_script(
                    self::PREFIX . 'installation', plugins_url('javascript/zanto-installation.js', dirname(__FILE__)), array('jquery-ui-sortable'), self::VERSION, true
            );

            wp_register_script(
                    self::PREFIX . 'mo_management', plugins_url('javascript/mo-management.js', dirname(__FILE__)), array('jquery'), self::VERSION, true
            );

            wp_register_script(
                    self::PREFIX . 'jquery_cookie', plugins_url('javascript/jquery.cookie.js', dirname(__FILE__)), array('jquery'), self::VERSION, true
            );

            wp_register_script(
                    self::PREFIX . 'browser_lang_redirect', plugins_url('javascript/browser-lang-redirect.js', dirname(__FILE__)), array('jquery', self::PREFIX . 'jquery_cookie'), self::VERSION, true
            );

            wp_register_style(
                    self::PREFIX . 'admin', plugins_url('css/admin.css', dirname(__FILE__)), array(), self::VERSION, 'all'
            );
			 wp_register_style(
                    self::PREFIX . 'icon_font', plugins_url('css/icon-font/css/font-awesome.min.css', dirname(__FILE__)), array(), self::VERSION, 'all'
            );
			
			wp_register_style('native_lang_select', GTP_PLUGIN_URL . 'css/language-selector.css', array(), ZWT_Base::VERSION, 'all');
           
		    if(GTP_LOAD_LS_CSS){
                 wp_enqueue_style('native_lang_select');
			}
			
            if (is_admin()) {
                wp_enqueue_style(self::PREFIX . 'admin');
				wp_enqueue_style(self::PREFIX . 'icon_font');
                wp_enqueue_script(self::PREFIX . 'zanto-translation-main');
            }

            if ('toplevel_page_zwt_settings' == $hook_suffix) {
                wp_enqueue_script(self::PREFIX . 'installation');
            }

            if ('zanto_page_zwt_manage_locales' == $hook_suffix) {
                wp_enqueue_script(self::PREFIX . 'mo_management');
            }
        }

        /**
         * Clears caches of content generated by caching plugins like WP Super Cache
         * @mvc Model
         * @author Zanto Translate
         */
        protected static function clearCachingPlugins() {
            // WP Super Cache
            if (function_exists('wp_cache_clear_cache'))
                wp_cache_clear_cache();

            // W3 Total Cache
            if (class_exists('W3_Plugin_TotalCacheAdmin')) {
                $w3TotalCache = & w3_instance('W3_Plugin_TotalCacheAdmin');

                if (method_exists($w3TotalCache, 'flush_all'))
                    $w3TotalCache->flush_all();
            }
        }

        function zwt_all_ajax() {
            require( dirname(__DIR__) . '/includes/ajax.php' );
        }

        /*
         * Instance methods
         */

        /**
         * Prepares sites to use the plugin during single or network-wide activation
         * @mvc Controller
         * @author Zanto Translate
         * @param bool $networkWide
         */
        public function activate() {
            global $wpdb;

            if (did_action('activate_' . plugin_basename(dirname(__DIR__) . '/zanto.php')) !== 1)
                return;


            /* 	if( $networkWide )
              {
              $blogs = $wpdb->get_col( "SELECT blog_id FROM $wpdb->blogs" );

              foreach( $blogs as $b )
              {
              switch_to_blog( $b );
              $this->singleActivate( $networkWide );
              }

              restore_current_blog();
              }

             */
            $this->singleActivate();
        }

        /**
         * Runs activation code on a new WPMS site when it's created
         * @mvc Controller
         * @author Zanto Translate
         * @param int $blogID
         */
        public function activateNewSite($blogID) {
            if (did_action('wpmu_new_blog') !== 1)
                return;

            switch_to_blog($blogID);
            $this->singleActivate();
            restore_current_blog();
        }

        /**
         * Prepares a single blog to use the plugin
         * @mvc Controller
         * @author Zanto Translate
         * @param bool $networkWide
         */
        protected function singleActivate() {
            foreach ($this->modules as $module)
                $module->activate();

            flush_rewrite_rules();
        }

        /**
         * Rolls back activation procedures when de-activating the plugin
         * @mvc Controller
         * @author Zanto Translate
         */
        public function deactivate() {
            foreach ($this->modules as $module)
                $module->deactivate();

            flush_rewrite_rules();
        }

        /**
         * Register callbacks for actions and filters
         * @mvc Controller
         * @author Zanto Translate
         */
        public function registerHookCallbacks() {
            // NOTE: Make sure you update the did_action() parameter in the corresponding callback method when changing the hooks here
            //add_action( 'wpmu_new_blog', 	        array( $this, 'activateNewSite') );
			add_action('plugins_loaded', __CLASS__ . '::loadLangFiles');
            add_action('wp_enqueue_scripts', __CLASS__ . '::loadResources');
            add_action('admin_enqueue_scripts', __CLASS__ . '::loadResources');

            add_action('init', array($this, 'init'));
            add_action('init', array($this, 'upgrade'), 11);
        }
		
		/**
         * Loads plugin translations
         * @mvc Controller
         * @author Zanto Translate
         */
		function loadLangFiles() {
            $lang_dir = GTP_PLUGIN_PATH . '/languages/';
            load_plugin_textdomain('Zanto', false, $lang_dir );
        }

        /**
         * Initializes variables
         * @mvc Controller
         * @author Zanto Translate
         */
        public function init() {
            if (did_action('init') !== 1)
                return;

            if (!defined('GTP_LANGUAGE_CODE')) {
                define('GTP_LANGUAGE_CODE', get_option('WPLANG'));
            }

            self::$notices = notices::getSingleton();

            if (self::DEBUG_MODE)
                self::$notices->debugMode = true;

            $zwt_interfaces = new ZWT_Interfaces();
            if (GTP_SETUP_COMPLETE) {
                new ZWT_Tax();
                new ZWT_WP_POST();
            } else {
                if (!isset($_REQUEST['page']) || $_REQUEST['page'] != 'zwt_settings')
                    self::$notices->enqueue(__('Zanto Installation is not complete, please click the button to finish installation procedure','Zanto').'&nbsp;<a class="button-primary" href="'.get_admin_url().'?page=zwt_settings">'.__('Configure Zanto','Zanto').'</a>');
            }
        }

        /**
         * Checks if the plugin was recently updated and upgrades if necessary
         * @mvc Controller
         * @author Zanto Translate
         * @param string $dbVersion
         */
        public function upgrade($dbVersion = 0) {
            if (did_action('init') !== 1)
                return;
				if(isset($this->modules['settings']->settings['db-version']))
             print_r($this->modules['settings']->settings);
            if (version_compare($this->modules['settings']->settings['zanto_settings']['db-version'], self::VERSION, '=='))
                return;

            foreach ($this->modules as $module)
                $module->upgrade($this->modules['settings']->settings['zanto_settings']['db-version']);
			    ZWT_Settings::save_setting('settings', array('db-version' => self::VERSION));
                self::clearCachingPlugins();
        }

        /**
         * Checks that the object is in a correct state
         * @mvc Model
         * @author Zanto Translate
         * @param string $property An individual property to check, or 'all' to check all of them
         * @return bool
         */
        protected function isValid($property = 'all') {
            return true;
        }

    }

    // end ZWT_Base

    require_once( dirname(__DIR__) . '/includes/notices/id-admin-notices.php' );
    require_once( dirname(__FILE__) . '/class.zwt-settings.php' );
    //require_once( dirname( __FILE__ ) . '/class.zwt-cron.php' );
    require_once( dirname(__FILE__) . '/class.zwt-translation-network.php' );
    require_once( dirname(__FILE__) . '/class.zwt-interfaces.php' );
    require_once( dirname(__FILE__) . '/class.zwt-download-mo.php' );
    require_once( dirname(__FILE__) . '/class.zwt-wp-post.php' );
    require_once( dirname(__FILE__) . '/class.zwt-wp-tax.php' );
}
?>